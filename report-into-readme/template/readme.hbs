[//]: # (this is generated by template, don't edit)

# envoy-filter-benchmark

envoy的 filter 目前有 3 种类型，5 种实现方式，本项目对 4 种实现方式进行了压力测试，以方便比较和选择合适的实现方式

3种类型为：

- 基于 lua 语言的 lua 引擎
- 基于 go 语言的 go 执行引擎
- 基于多种语言的 wasm v8 引擎

4 种实现方式为：

- 使用 lua 语言实现
- 使用 go 语言实现
- 使用 tinygo 实现的 wasm
- 使用 rust 实现的 wasm
- ~~使用 c++ 实现的 wasm~~ (不会 c++)

其中 go 语言的 go 执行引擎目前还在测试阶段，只有**contrib**版本的 envoy 才有此功能

## 本地运行

本地运行只依赖 docker 和 docker compose 环境，只需要在根目录下运行./bench.sh 即可
虽然运行环境不同，如 CPU，内存大小等每个人的环境不尽相同，但是本压测也只是横向对比，
更多的是参考相同环境下的各种实现之间的差异，所以环境不同不影响压测执行

## 执行结果

压测脚本会对不同场景，不同实现各执行一次，会使用 fortio 进行压测，压测结果文件分别放在 report-passthrough 和 report-basic-auth 目录下
然后执行 report-into-readme 代码进行分析生成柱状图，使用模版生成此 README 文件

### passthrough 场景

此场景只是引入对应实现机制，而什么都不做，对比 envoy 基准测试

结果如下：

| 实现方式       | RT-Min | RT-Avg | RT-Max | RT-P50 | RT-P75 | RT-P90 | RT-P99 | RT-P99.9 | QPS |
|------------|--------|--------|--------|--------|--------|--------|--------|----------|-----|
{{#each passthrough_data as |p| }}
| {{format p.name ~}} | {{format p.min ~}} | {{format p.avg ~}} | {{format p.max ~}} | {{format p.p50 ~}} | {{format p.p75 ~}} | {{format p.p90 ~}} | {{format p.p99 ~}} | {{format p.p999 ~}}   | {{format p.qps ~}}   |
{{/each}}

P50-P99.9 的柱状图

![](assets/passthrough.svg)

### basic-auth 场景

此场景是验证 http 的 basic-auth 功能，如果 token 验证正确则返回结果，否则返回 403

结果如下：

| 实现方式       | RT-Min | RT-Avg | RT-Max | RT-P50 | RT-P75 | RT-P90 | RT-P99 | RT-P99.9 | QPS |
|------------|--------|--------|--------|--------|--------|--------|--------|----------|-----|
{{#each basic_auth_data as |b| }}
  | {{format b.name ~}} | {{format b.min ~}} | {{format b.avg ~}} | {{format b.max ~}} | {{format b.p50 ~}} | {{format b.p75 ~}} | {{format b.p90 ~}} | {{format b.p99 ~}} | {{format b.p999 ~}}   | {{format b.qps ~}}   |
{{/each}}

P50-P99.9 的柱状图

![](assets/basic_auth.svg)

## 结论

1. 不管是何种实现方式，p50-p99 的响应都差别不大
2. 但是 qps 表现最好的是 rust 实现方式
3. tinygo 不推荐使用，因为 Max 响应时间太长，导致 qps 垫底
4. go 语言的 go 执行引擎目前还在测试阶段，只有**contrib**版本的 envoy 才有此功能，可能需要定制 istio 的 envoy image，才能运行
5. lua 的 qps 也基本倒数，符合无 JIT 优化的表现
6. rust 的稳定性和 qps 是最好的，也是最为推荐的